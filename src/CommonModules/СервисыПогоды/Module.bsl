Функция ВернутьТемпературу(Знач НаселенныйПункт, Знач Сервис) Экспорт
	
	Ответ = ВыполнитьЗапросGET(НаселенныйПункт, Сервис);
	
	Если Ответ.КодСостояния = 200 Тогда
		Данные = ПреобразоватьJSON(Ответ);
		Температура = РазобратьОтветПоПути(Данные, Сервис.ПутьКТемпературе);
		Возврат Температура;
	Иначе
		ОповеститьОбОшибке("Проблема с настройками Сервиса");
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьЗапросGET(НаселенныйПункт, Сервис) Экспорт
	
	СтруктураРеквизитовСервиса = ЗначенияРеквизитовОбъекта(Сервис, "СтрокаЗапроса, ЗаголовкиЗапроса, ПараметрыЗапроса");
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураРеквизитовСервиса.СтрокаЗапроса,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	Заголовки = Новый Соответствие;
	ТаблицаЗаголовков = СтруктураРеквизитовСервиса.ЗаголовкиЗапроса.Выгрузить();
	
	Для Каждого СтрокаЗаголовков из ТаблицаЗаголовков Цикл
		Заголовки.Вставить(СтрокаЗаголовков.ИмяЗаголовка, СтрокаЗаголовков.ЗначениеЗаголовка); 
	КонецЦикла;
	
	ТаблицаПараметров = СтруктураРеквизитовСервиса.ПараметрыЗапроса.Выгрузить();
	СтрокаHTTPЗапроса = СформироватьСтрокуЗапроса(ТаблицаПараметров, НаселенныйПункт);
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаHTTPЗапроса, Заголовки);
	Ответ = HTTPСоединение.ВызватьHTTPМетод("GET", HTTPЗапрос);
	
	Возврат Ответ;
	
КонецФункции

Функция РазобратьОтветПоПути(Данные, ПутьКТемпературе) Экспорт
	
	МассивПути = СтрРазделить(ПутьКТемпературе, ";");
	
	Для каждого ЭлементПути Из МассивПути Цикл
		Данные = Данные[ЭлементПути];
	КонецЦикла; 
	
	Возврат Данные;
	
КонецФункции

Функция СформироватьСтрокуЗапроса(Параметры, НаселенныйПункт) Экспорт
	
	СтрокаHTTPЗапроса = "";
	
	Для Каждого СрокаПараметров Из Параметры Цикл
		
		СтрокаHTTPЗапроса = СтрокаHTTPЗапроса + ?(СтрокаHTTPЗапроса = "", "?", "&");
		ИмяПараметра = СрокаПараметров.ИмяПараметра;
		ЗначениеПараметра = СрокаПараметров.ЗначениеПараметра;
		
		Если СрокаПараметров.ТипПараметра = ПредопределенноеЗначение("Перечисление.ТипыЗаголовковЗапроса.Широта") Тогда
			ЗначениеПараметра = Формат(НаселенныйПункт.Широта, "ЧРД=.");
		КонецЕсли;
		
		Если СрокаПараметров.ТипПараметра = ПредопределенноеЗначение("Перечисление.ТипыЗаголовковЗапроса.Долгота") Тогда
			ЗначениеПараметра = Формат(НаселенныйПункт.Долгота, "ЧРД=.");
		КонецЕсли;
		
		СтрокаHTTPЗапроса = СтрокаHTTPЗапроса + ИмяПараметра + "=" + ЗначениеПараметра;
		
	КонецЦикла;
	
	Возврат СтрокаHTTPЗапроса;
	
КонецФункции

Функция ПреобразоватьJSON(Ответ) Экспорт
	
	Данные = Ответ.ПолучитьТелоКакСтроку();
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Данные);
	Данные = ПрочитатьJSON(Чтение, Истина);
	Чтение.Закрыть();
	
	Возврат Данные;
	
КонецФункции

Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ПустаяСтрока(Реквизиты) Тогда 
		ВызватьИсключение 
			НСтр("ru = 'Неверный второй параметр Реквизиты в функции ЗначенияРеквизитаОбъектов: 
			           |- Поле объекта должно быть указано'");	
	КонецЕсли;
	
	Если СтрНайти(Реквизиты, ".") <> 0 Тогда 
		ВызватьИсключение 
			НСтр("ru = 'Неверный второй параметр Реквизиты в функции ЗначенияРеквизитаОбъектов: 
			           |- Обращение через точку не поддерживается'");
	КонецЕсли;
	
	Попытка
		ПолноеИмяОбъектаМетаданных = Ссылка.Метаданные().ПолноеИмя();
	Исключение
		ВызватьИсключение 
			НСтр("ru = 'Неверный параметр Ссылки в функции ЗначенияРеквизитаОбъектов: 
			           |- Значение должно быть ссылкой'");
	КонецПопытки;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка КАК Ссылка,
		|	&Реквизиты
		|ИЗ
		|	&ПолноеИмяОбъектаМетаданных КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Реквизиты", Реквизиты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		ВызватьИсключение
				НСтр("ru = 'Неверный второй параметр Реквизиты в функции ЗначенияРеквизитаОбъектов'");
	КонецПопытки;
	
	ЗначенияРеквизитов = Новый Структура(Реквизиты);
	
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Процедура ОповеститьОбОшибке(ТекстСообщения)
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Сообщить();
	
КонецПроцедуры